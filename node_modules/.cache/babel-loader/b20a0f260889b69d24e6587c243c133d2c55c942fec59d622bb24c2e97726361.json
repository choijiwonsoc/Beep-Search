{"ast":null,"code":"var _jsxFileName = \"/Users/choijiwon/my-projects/autocomplete-component/src/components/Autocomplete.tsx\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from 'react';\nimport styles from './Autocomplete.module.css';\nimport debounce from '../utils/debounce';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst Autocomplete = ({\n  description,\n  options,\n  placeholder,\n  disabled,\n  filterOptions,\n  loading,\n  multiple,\n  onChange,\n  onInputChange,\n  renderOption,\n  value,\n  searchMode,\n  asyncSearch\n}) => {\n  _s();\n  const [inputValue, setInputValue] = useState('');\n  const [filteredOptions, setFilteredOptions] = useState([]);\n  const [selectedOptions, setSelectedOptions] = useState([]);\n  const [showOptions, setShowOptions] = useState(false); // State to manage showing options\n\n  const handleAsyncSearch = debounce(async query => {\n    if (asyncSearch) {\n      const results = await asyncSearch(query);\n      setFilteredOptions(results);\n    }\n  }, 50);\n  useEffect(() => {\n    if (searchMode === 'async' && asyncSearch) {\n      handleAsyncSearch(inputValue);\n    } else if (filterOptions) {\n      setFilteredOptions(filterOptions(options, inputValue));\n    } else {\n      setFilteredOptions(options.filter(option => option.label.toLowerCase().includes(inputValue.toLowerCase())));\n    }\n  }, [inputValue, options, filterOptions, searchMode, asyncSearch, handleAsyncSearch]);\n  const handleInputChange = event => {\n    setInputValue(event.target.value);\n    onInputChange(event.target.value);\n    setShowOptions(true); // Show options when input is changed\n  };\n  const handleFocus = () => {\n    setShowOptions(true); // Show options when input is focused\n  };\n  const handleBlur = () => {\n    setShowOptions(false); // Hide options when input loses focus\n  };\n  const handleOptionSelection = option => {\n    if (multiple) {\n      // Toggle selection for multiple selections\n      const isSelected = selectedOptions.some(item => item.value === option.value);\n      if (isSelected) {\n        const updatedOptions = selectedOptions.filter(item => item.value !== option.value);\n        setSelectedOptions(updatedOptions);\n      } else {\n        setSelectedOptions([...selectedOptions, option]);\n      }\n    } else {\n      // Single selection\n      setSelectedOptions([option]);\n      setInputValue(option.label); // Display selected option in input\n      setShowOptions(true); // Hide options after selection\n      onChange(option);\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: styles.autocomplete,\n    children: [description && /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"description\",\n      children: description\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 100,\n      columnNumber: 29\n    }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n      type: \"text\",\n      value: inputValue,\n      onChange: handleInputChange,\n      onFocus: handleFocus,\n      onBlur: handleBlur,\n      placeholder: placeholder,\n      disabled: disabled\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 101,\n      columnNumber: 13\n    }, this), loading && /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"spinner\",\n      children: \"Loading...\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 110,\n      columnNumber: 25\n    }, this), showOptions && searchMode === 'local' &&\n    /*#__PURE__*/\n    // Show options only for synchronous search when focused\n    _jsxDEV(\"div\", {\n      className: \"autocomplete-options mt-2\",\n      children: filteredOptions.map(option => /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"p-2 cursor-pointer transition duration-300 ease-out hover:bg-gray-100\",\n        children: [renderOption(option), /*#__PURE__*/_jsxDEV(\"label\", {\n          className: \"flex items-center\",\n          children: /*#__PURE__*/_jsxDEV(\"input\", {\n            type: \"checkbox\",\n            checked: selectedOptions.some(item => item.value === option.value),\n            onChange: () => handleOptionSelection(option),\n            className: \"mr-2\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 120,\n            columnNumber: 33\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 119,\n          columnNumber: 29\n        }, this)]\n      }, option.value, true, {\n        fileName: _jsxFileName,\n        lineNumber: 114,\n        columnNumber: 25\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 112,\n      columnNumber: 17\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 99,\n    columnNumber: 9\n  }, this);\n};\n_s(Autocomplete, \"9k7pIOOfDHuFVd0PmxMPgNkjaBk=\");\n_c = Autocomplete;\nexport default Autocomplete;\nexport {};\nvar _c;\n$RefreshReg$(_c, \"Autocomplete\");","map":{"version":3,"names":["React","useState","useEffect","styles","debounce","jsxDEV","_jsxDEV","Autocomplete","description","options","placeholder","disabled","filterOptions","loading","multiple","onChange","onInputChange","renderOption","value","searchMode","asyncSearch","_s","inputValue","setInputValue","filteredOptions","setFilteredOptions","selectedOptions","setSelectedOptions","showOptions","setShowOptions","handleAsyncSearch","query","results","filter","option","label","toLowerCase","includes","handleInputChange","event","target","handleFocus","handleBlur","handleOptionSelection","isSelected","some","item","updatedOptions","className","autocomplete","children","fileName","_jsxFileName","lineNumber","columnNumber","type","onFocus","onBlur","map","checked","_c","$RefreshReg$"],"sources":["/Users/choijiwon/my-projects/autocomplete-component/src/components/Autocomplete.tsx"],"sourcesContent":["import React, { useState, useEffect } from 'react';\nimport styles from './Autocomplete.module.css';\nimport debounce from '../utils/debounce';\n\nexport interface Option {\n    value: string;\n    label: string;\n}\n\ninterface AutocompleteProps {\n    description: string;\n    options: Option[];\n    placeholder: string;\n    disabled: boolean;\n    filterOptions?: (options: Option[], inputValue: string) => Option[];\n    loading: boolean;\n    multiple: boolean;\n    onChange: (selected: Option | Option[]) => void;\n    onInputChange: (inputValue: string) => void;\n    renderOption: (option: Option) => React.ReactNode;\n    value: Option | Option[];\n    searchMode: 'local' | 'async';\n    asyncSearch?: (query: string) => Promise<Option[]>;\n}\n\nconst Autocomplete: React.FC<AutocompleteProps> = ({\n    description,\n    options,\n    placeholder,\n    disabled,\n    filterOptions,\n    loading,\n    multiple,\n    onChange,\n    onInputChange,\n    renderOption,\n    value,\n    searchMode,\n    asyncSearch,\n}) => {\n    const [inputValue, setInputValue] = useState('');\n    const [filteredOptions, setFilteredOptions] = useState<Option[]>([]);\n    const [selectedOptions, setSelectedOptions] = useState<Option[]>([]);\n    const [showOptions, setShowOptions] = useState(false); // State to manage showing options\n\n    const handleAsyncSearch = debounce(async (query: string) => {\n        if (asyncSearch) {\n            const results = await asyncSearch(query);\n            setFilteredOptions(results);\n        }\n    }, 50);\n\n    useEffect(() => {\n        if (searchMode === 'async' && asyncSearch) {\n            handleAsyncSearch(inputValue);\n        } else if (filterOptions) {\n            setFilteredOptions(filterOptions(options, inputValue));\n        } else {\n            setFilteredOptions(options.filter(option =>\n                option.label.toLowerCase().includes(inputValue.toLowerCase())\n            ));\n        }\n    }, [inputValue, options, filterOptions, searchMode, asyncSearch, handleAsyncSearch]);\n\n    const handleInputChange = (event: React.ChangeEvent<HTMLInputElement>) => {\n        setInputValue(event.target.value);\n        onInputChange(event.target.value);\n        setShowOptions(true); // Show options when input is changed\n    };\n\n    const handleFocus = () => {\n        setShowOptions(true); // Show options when input is focused\n    };\n\n    const handleBlur = () => {\n        setShowOptions(false); // Hide options when input loses focus\n    };\n\n    const handleOptionSelection = (option: Option) => {\n        if (multiple) {\n            // Toggle selection for multiple selections\n            const isSelected = selectedOptions.some(item => item.value === option.value);\n            if (isSelected) {\n                const updatedOptions = selectedOptions.filter(item => item.value !== option.value);\n                setSelectedOptions(updatedOptions);\n            } else {\n                setSelectedOptions([...selectedOptions, option]);\n            }\n        } else {\n            // Single selection\n            setSelectedOptions([option]);\n            setInputValue(option.label); // Display selected option in input\n            setShowOptions(true); // Hide options after selection\n            onChange(option);\n        }\n    };\n\n    return (\n        <div className={styles.autocomplete}>\n            {description && <div className=\"description\">{description}</div>}\n            <input\n                type=\"text\"\n                value={inputValue}\n                onChange={handleInputChange}\n                onFocus={handleFocus}\n                onBlur={handleBlur}\n                placeholder={placeholder}\n                disabled={disabled}\n            />\n            {loading && <div className=\"spinner\">Loading...</div>}\n            {showOptions && searchMode === 'local' && ( // Show options only for synchronous search when focused\n                <div className=\"autocomplete-options mt-2\">\n                    {filteredOptions.map(option => (\n                        <div\n                            key={option.value}\n                            className=\"p-2 cursor-pointer transition duration-300 ease-out hover:bg-gray-100\"\n                        >\n                            {renderOption(option)}\n                            <label className=\"flex items-center\">\n                                <input\n                                    type=\"checkbox\"\n                                    checked={selectedOptions.some(item => item.value === option.value)}\n                                    onChange={() => handleOptionSelection(option)}\n                                    className=\"mr-2\"\n                                />\n                                \n                            </label>\n                        </div>\n                    ))}\n                </div>\n            )}\n        </div>\n    );\n};\n\nexport default Autocomplete;\n\n\nexport { };"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}