{"ast":null,"code":"var _jsxFileName = \"/Users/choijiwon/my-projects/autocomplete-component/src/components/Autocomplete.tsx\",\n  _s = $RefreshSig$();\nimport React, { useState } from 'react';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst Autocomplete = ({\n  description,\n  disabled = false,\n  filterOptions,\n  label,\n  loading = false,\n  multiple = false,\n  onChange,\n  onInputChange,\n  options,\n  placeholder = 'Search...',\n  renderOption,\n  value\n}) => {\n  _s();\n  const [inputValue, setInputValue] = useState('');\n  const handleInputChange = event => {\n    const value = event.target.value;\n    setInputValue(value);\n    if (onInputChange) {\n      onInputChange(value);\n    }\n  };\n  const handleOptionClick = option => {\n    if (multiple) {\n      // Logic for multiple selection (e.g., push to array)\n    } else {\n      onChange(option);\n    }\n  };\n  const filteredOptions = filterOptions(options, inputValue);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"autocomplete\",\n    children: [label && /*#__PURE__*/_jsxDEV(\"label\", {\n      children: label\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 59,\n      columnNumber: 23\n    }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n      type: \"text\",\n      value: inputValue,\n      onChange: handleInputChange,\n      placeholder: placeholder,\n      disabled: disabled\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 60,\n      columnNumber: 13\n    }, this), loading && /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"spinner\",\n      children: \"Loading...\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 66,\n      columnNumber: 25\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"autocomplete-options\",\n      children: filteredOptions.map(option => /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"autocomplete-option\",\n        onClick: () => handleOptionClick(option),\n        children: renderOption(option)\n      }, option.value, false, {\n        fileName: _jsxFileName,\n        lineNumber: 69,\n        columnNumber: 21\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 67,\n      columnNumber: 13\n    }, this), description && /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"description\",\n      children: description\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 78,\n      columnNumber: 29\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 58,\n    columnNumber: 9\n  }, this);\n};\n_s(Autocomplete, \"SORcW8kVWUa8fZ+un8oXhp/OLnk=\");\n_c = Autocomplete;\nexport default Autocomplete;\nexport {};\nvar _c;\n$RefreshReg$(_c, \"Autocomplete\");","map":{"version":3,"names":["React","useState","jsxDEV","_jsxDEV","Autocomplete","description","disabled","filterOptions","label","loading","multiple","onChange","onInputChange","options","placeholder","renderOption","value","_s","inputValue","setInputValue","handleInputChange","event","target","handleOptionClick","option","filteredOptions","className","children","fileName","_jsxFileName","lineNumber","columnNumber","type","map","onClick","_c","$RefreshReg$"],"sources":["/Users/choijiwon/my-projects/autocomplete-component/src/components/Autocomplete.tsx"],"sourcesContent":["import React, { useState, ChangeEvent } from 'react';\nimport styles from './autocomplete.module.css';\n\nexport interface Option {\n    value: string;\n    label: string;\n}\n\nexport interface AutocompleteProps {\n    description: string;\n    disabled: boolean;\n    filterOptions: (options: Option[], inputValue: string) => Option[];\n    label: string;\n    loading: boolean;\n    multiple: boolean;\n    onChange: (selected: Option | Option[]) => void;\n    onInputChange: (inputValue: string) => void;\n    options: Option[];\n    placeholder: string;\n    renderOption: (option: Option) => React.ReactNode;\n    value: Option | Option[];\n}\n\nconst Autocomplete: React.FC<AutocompleteProps> = ({\n    description,\n    disabled = false,\n    filterOptions,\n    label,\n    loading = false,\n    multiple = false,\n    onChange,\n    onInputChange,\n    options,\n    placeholder = 'Search...',\n    renderOption,\n    value,\n}) => {\n    const [inputValue, setInputValue] = useState('');\n    const handleInputChange = (event: React.ChangeEvent<HTMLInputElement>) => {\n        const value = event.target.value;\n        setInputValue(value);\n        if (onInputChange) {\n            onInputChange(value);\n        }\n    };\n\n    const handleOptionClick = (option: Option) => {\n        if (multiple) {\n            // Logic for multiple selection (e.g., push to array)\n        } else {\n            onChange(option);\n        }\n    };\n\n    const filteredOptions = filterOptions(options, inputValue);\n\n    return (\n        <div className=\"autocomplete\">\n            {label && <label>{label}</label>}\n            <input\n                type=\"text\"\n                value={inputValue}\n                onChange={handleInputChange}\n                placeholder={placeholder}\n                disabled={disabled} />\n            {loading && <div className=\"spinner\">Loading...</div>}\n            <div className=\"autocomplete-options\">\n                {filteredOptions.map(option => (\n                    <div\n                        key={option.value}\n                        className=\"autocomplete-option\"\n                        onClick={() => handleOptionClick(option)}\n                    >\n                        {renderOption(option)}\n                    </div>\n                ))}\n            </div>\n            {description && <div className=\"description\">{description}</div>}\n\n        </div>\n    );\n};\n\nexport default Autocomplete;\nexport { Option };\nexport { };"],"mappings":";;AAAA,OAAOA,KAAK,IAAIC,QAAQ,QAAqB,OAAO;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAuBrD,MAAMC,YAAyC,GAAGA,CAAC;EAC/CC,WAAW;EACXC,QAAQ,GAAG,KAAK;EAChBC,aAAa;EACbC,KAAK;EACLC,OAAO,GAAG,KAAK;EACfC,QAAQ,GAAG,KAAK;EAChBC,QAAQ;EACRC,aAAa;EACbC,OAAO;EACPC,WAAW,GAAG,WAAW;EACzBC,YAAY;EACZC;AACJ,CAAC,KAAK;EAAAC,EAAA;EACF,MAAM,CAACC,UAAU,EAAEC,aAAa,CAAC,GAAGlB,QAAQ,CAAC,EAAE,CAAC;EAChD,MAAMmB,iBAAiB,GAAIC,KAA0C,IAAK;IACtE,MAAML,KAAK,GAAGK,KAAK,CAACC,MAAM,CAACN,KAAK;IAChCG,aAAa,CAACH,KAAK,CAAC;IACpB,IAAIJ,aAAa,EAAE;MACfA,aAAa,CAACI,KAAK,CAAC;IACxB;EACJ,CAAC;EAED,MAAMO,iBAAiB,GAAIC,MAAc,IAAK;IAC1C,IAAId,QAAQ,EAAE;MACV;IAAA,CACH,MAAM;MACHC,QAAQ,CAACa,MAAM,CAAC;IACpB;EACJ,CAAC;EAED,MAAMC,eAAe,GAAGlB,aAAa,CAACM,OAAO,EAAEK,UAAU,CAAC;EAE1D,oBACIf,OAAA;IAAKuB,SAAS,EAAC,cAAc;IAAAC,QAAA,GACxBnB,KAAK,iBAAIL,OAAA;MAAAwB,QAAA,EAAQnB;IAAK;MAAAoB,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAQ,CAAC,eAChC5B,OAAA;MACI6B,IAAI,EAAC,MAAM;MACXhB,KAAK,EAAEE,UAAW;MAClBP,QAAQ,EAAES,iBAAkB;MAC5BN,WAAW,EAAEA,WAAY;MACzBR,QAAQ,EAAEA;IAAS;MAAAsB,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAE,CAAC,EACzBtB,OAAO,iBAAIN,OAAA;MAAKuB,SAAS,EAAC,SAAS;MAAAC,QAAA,EAAC;IAAU;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAK,CAAC,eACrD5B,OAAA;MAAKuB,SAAS,EAAC,sBAAsB;MAAAC,QAAA,EAChCF,eAAe,CAACQ,GAAG,CAACT,MAAM,iBACvBrB,OAAA;QAEIuB,SAAS,EAAC,qBAAqB;QAC/BQ,OAAO,EAAEA,CAAA,KAAMX,iBAAiB,CAACC,MAAM,CAAE;QAAAG,QAAA,EAExCZ,YAAY,CAACS,MAAM;MAAC,GAJhBA,MAAM,CAACR,KAAK;QAAAY,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAKhB,CACR;IAAC;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACD,CAAC,EACL1B,WAAW,iBAAIF,OAAA;MAAKuB,SAAS,EAAC,aAAa;MAAAC,QAAA,EAAEtB;IAAW;MAAAuB,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAM,CAAC;EAAA;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OAE/D,CAAC;AAEd,CAAC;AAACd,EAAA,CA1DIb,YAAyC;AAAA+B,EAAA,GAAzC/B,YAAyC;AA4D/C,eAAeA,YAAY;AAE3B;AAAW,IAAA+B,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}