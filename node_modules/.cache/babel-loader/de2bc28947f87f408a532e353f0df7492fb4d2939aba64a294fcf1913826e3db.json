{"ast":null,"code":"var _jsxFileName = \"/Users/choijiwon/my-projects/autocomplete-component/src/components/Autocomplete.tsx\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from 'react';\nimport styles from './Autocomplete.module.css';\nimport debounce from '../utils/debounce';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst Autocomplete = ({\n  description,\n  options,\n  placeholder,\n  disabled,\n  filterOptions,\n  loading,\n  multiple,\n  onChange,\n  onInputChange,\n  renderOption,\n  value,\n  searchMode,\n  asyncSearch,\n  handleOptionClick\n}) => {\n  _s();\n  const [inputValue, setInputValue] = useState('');\n  const [filteredOptions, setFilteredOptions] = useState([]);\n  const [selectedOptions, setSelectedOptions] = useState([]);\n  const [showOptions, setShowOptions] = useState(false); // State to manage showing options\n\n  const handleAsyncSearch = debounce(async query => {\n    if (asyncSearch) {\n      const results = await asyncSearch(query);\n      setFilteredOptions(results);\n    }\n  }, 300);\n  useEffect(() => {\n    if (searchMode === 'async' && asyncSearch) {\n      handleAsyncSearch(inputValue);\n    } else if (filterOptions) {\n      setFilteredOptions(filterOptions(options, inputValue));\n    } else {\n      setFilteredOptions(options.filter(option => option.label.toLowerCase().includes(inputValue.toLowerCase())));\n    }\n  }, [inputValue, options, filterOptions, searchMode, asyncSearch, handleAsyncSearch]);\n  const handleInputChange = event => {\n    setInputValue(event.target.value);\n    onInputChange(event.target.value);\n    setShowOptions(true); // Show options when input is changed\n  };\n  const handleFocus = () => {\n    setShowOptions(true); // Show options when input is focused\n  };\n  const handleBlur = () => {\n    setShowOptions(false); // Hide options when input loses focus\n  };\n  const handleOptionSelection = option => {\n    if (multiple) {\n      // Toggle selection for multiple selections\n      const isSelected = selectedOptions.some(item => item.value === option.value);\n      if (isSelected) {\n        const updatedOptions = selectedOptions.filter(item => item.value !== option.value);\n        setSelectedOptions(updatedOptions);\n      } else {\n        setSelectedOptions([...selectedOptions, option]);\n      }\n    } else {\n      // Single selection\n      setSelectedOptions([option]);\n      setInputValue(option.label); // Display selected option in input\n      setShowOptions(false); // Hide options after selection\n      onChange(option);\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: styles.autocomplete,\n    children: [description && /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"description\",\n      children: description\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 102,\n      columnNumber: 23\n    }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n      type: \"text\",\n      value: inputValue,\n      onChange: handleInputChange,\n      onFocus: handleFocus,\n      onBlur: handleBlur,\n      placeholder: placeholder,\n      disabled: disabled\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 103,\n      columnNumber: 7\n    }, this), loading && /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"spinner\",\n      children: \"Loading...\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 112,\n      columnNumber: 19\n    }, this), showOptions && searchMode === 'local' &&\n    /*#__PURE__*/\n    // Show options only for synchronous search when focused\n    _jsxDEV(\"div\", {\n      className: \"autocomplete-options mt-2\",\n      children: filteredOptions.map(option => /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"p-2 cursor-pointer transition duration-300 ease-out hover:bg-gray-100\",\n        children: /*#__PURE__*/_jsxDEV(\"label\", {\n          className: \"flex items-center\",\n          children: [/*#__PURE__*/_jsxDEV(\"input\", {\n            type: \"checkbox\",\n            checked: selectedOptions.some(item => item.value === option.value),\n            onChange: () => handleOptionSelection(option),\n            className: \"mr-2\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 121,\n            columnNumber: 19\n          }, this), renderOption(option)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 120,\n          columnNumber: 15\n        }, this)\n      }, option.value, false, {\n        fileName: _jsxFileName,\n        lineNumber: 116,\n        columnNumber: 13\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 114,\n      columnNumber: 9\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 101,\n    columnNumber: 5\n  }, this);\n};\n_s(Autocomplete, \"9k7pIOOfDHuFVd0PmxMPgNkjaBk=\");\n_c = Autocomplete;\nexport default Autocomplete;\nexport {};\nvar _c;\n$RefreshReg$(_c, \"Autocomplete\");","map":{"version":3,"names":["React","useState","useEffect","styles","debounce","jsxDEV","_jsxDEV","Autocomplete","description","options","placeholder","disabled","filterOptions","loading","multiple","onChange","onInputChange","renderOption","value","searchMode","asyncSearch","handleOptionClick","_s","inputValue","setInputValue","filteredOptions","setFilteredOptions","selectedOptions","setSelectedOptions","showOptions","setShowOptions","handleAsyncSearch","query","results","filter","option","label","toLowerCase","includes","handleInputChange","event","target","handleFocus","handleBlur","handleOptionSelection","isSelected","some","item","updatedOptions","className","autocomplete","children","fileName","_jsxFileName","lineNumber","columnNumber","type","onFocus","onBlur","map","checked","_c","$RefreshReg$"],"sources":["/Users/choijiwon/my-projects/autocomplete-component/src/components/Autocomplete.tsx"],"sourcesContent":["import React, { useState, useEffect } from 'react';\nimport styles from './Autocomplete.module.css';\nimport debounce from '../utils/debounce';\n\nexport interface Option {\n  value: string;\n  label: string;\n}\n\ninterface AutocompleteProps {\n  description: string;\n  options: Option[];\n  placeholder: string;\n  disabled: boolean;\n  filterOptions?: (options: Option[], inputValue: string) => Option[];\n  loading: boolean;\n  multiple: boolean;\n  onChange: (selected: Option | Option[]) => void;\n  onInputChange: (inputValue: string) => void;\n  renderOption: (option: Option) => React.ReactNode;\n  value: Option | Option[];\n  searchMode: 'local' | 'async';\n  asyncSearch?: (query: string) => Promise<Option[]>;\n  handleOptionClick: (option: Option) => void;\n}\n\nconst Autocomplete: React.FC<AutocompleteProps> = ({\n  description,\n  options,\n  placeholder,\n  disabled,\n  filterOptions,\n  loading,\n  multiple,\n  onChange,\n  onInputChange,\n  renderOption,\n  value,\n  searchMode,\n  asyncSearch,\n  handleOptionClick,\n}) => {\n  const [inputValue, setInputValue] = useState('');\n  const [filteredOptions, setFilteredOptions] = useState<Option[]>([]);\n  const [selectedOptions, setSelectedOptions] = useState<Option[]>([]);\n  const [showOptions, setShowOptions] = useState(false); // State to manage showing options\n\n  const handleAsyncSearch = debounce(async (query: string) => {\n    if (asyncSearch) {\n      const results = await asyncSearch(query);\n      setFilteredOptions(results);\n    }\n  }, 300);\n\n  useEffect(() => {\n    if (searchMode === 'async' && asyncSearch) {\n      handleAsyncSearch(inputValue);\n    } else if (filterOptions) {\n      setFilteredOptions(filterOptions(options, inputValue));\n    } else {\n      setFilteredOptions(options.filter(option =>\n        option.label.toLowerCase().includes(inputValue.toLowerCase())\n      ));\n    }\n  }, [inputValue, options, filterOptions, searchMode, asyncSearch, handleAsyncSearch]);\n\n  const handleInputChange = (event: React.ChangeEvent<HTMLInputElement>) => {\n    setInputValue(event.target.value);\n    onInputChange(event.target.value);\n    setShowOptions(true); // Show options when input is changed\n  };\n\n  const handleFocus = () => {\n    setShowOptions(true); // Show options when input is focused\n  };\n\n  const handleBlur = () => {\n    setShowOptions(false); // Hide options when input loses focus\n  };\n\n  const handleOptionSelection = (option: Option) => {\n    if (multiple) {\n      // Toggle selection for multiple selections\n      const isSelected = selectedOptions.some(item => item.value === option.value);\n      if (isSelected) {\n        const updatedOptions = selectedOptions.filter(item => item.value !== option.value);\n        setSelectedOptions(updatedOptions);\n      } else {\n        setSelectedOptions([...selectedOptions, option]);\n      }\n    } else {\n      // Single selection\n      setSelectedOptions([option]);\n      setInputValue(option.label); // Display selected option in input\n      setShowOptions(false); // Hide options after selection\n      onChange(option);\n    }\n  };\n\n  return (\n    <div className={styles.autocomplete}>\n      {description && <div className=\"description\">{description}</div>}\n      <input\n        type=\"text\"\n        value={inputValue}\n        onChange={handleInputChange}\n        onFocus={handleFocus}\n        onBlur={handleBlur}\n        placeholder={placeholder}\n        disabled={disabled}\n      />\n      {loading && <div className=\"spinner\">Loading...</div>}\n      {showOptions && searchMode === 'local' && ( // Show options only for synchronous search when focused\n        <div className=\"autocomplete-options mt-2\">\n          {filteredOptions.map(option => (\n            <div\n              key={option.value}\n              className=\"p-2 cursor-pointer transition duration-300 ease-out hover:bg-gray-100\"\n            >\n              <label className=\"flex items-center\">\n                  <input\n                    type=\"checkbox\"\n                    checked={selectedOptions.some(item => item.value === option.value)}\n                    onChange={() => handleOptionSelection(option)}\n                    className=\"mr-2\"\n                  />\n                  {renderOption(option)}\n                </label>\n            </div>\n          ))}\n        </div>\n      )}\n    </div>\n  );\n};\n\nexport default Autocomplete;\n\n\nexport { };"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}