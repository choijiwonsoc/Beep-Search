{"ast":null,"code":"var _jsxFileName = \"/Users/choijiwon/my-projects/autocomplete-component/src/components/Autocomplete.tsx\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect, useRef } from 'react';\nimport styles from './Autocomplete.module.css';\nimport debounce from '../utils/debounce';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst Autocomplete = ({\n  description,\n  options,\n  placeholder,\n  disabled,\n  loading,\n  onChange,\n  renderOption,\n  value,\n  searchMode,\n  asyncSearch\n}) => {\n  _s();\n  const [inputValue, setInputValue] = useState('');\n  const [selectedOptions, setSelectedOptions] = useState(value); // Initialize selectedOptions with the prop value\n  const [showDropdown, setShowDropdown] = useState(false); // State to manage dropdown visibility\n\n  const dropdownRef = useRef(null);\n  const handleAsyncSearch = debounce(async query => {\n    // Async search implementation here\n  }, 300);\n  useEffect(() => {\n    if (searchMode === 'async') {\n      handleAsyncSearch(inputValue); // Perform async search if search mode is async\n    }\n    // No need to set filteredOptions here, it will be updated in the handleInputChange handler\n  }, [inputValue, searchMode, handleAsyncSearch]);\n  const handleInputChange = event => {\n    setInputValue(event.target.value);\n    // Local filtering logic here if search mode is local\n  };\n  const handleOptionSelection = option => {\n    const isSelected = selectedOptions.some(item => item.value === option.value);\n    if (isSelected) {\n      // Remove the option from selectedOptions if already selected\n      const updatedOptions = selectedOptions.filter(item => item.value !== option.value);\n      setSelectedOptions(updatedOptions);\n    } else {\n      // Add the option to selectedOptions if not already selected\n      setSelectedOptions([...selectedOptions, option]);\n    }\n  };\n  useEffect(() => {\n    // Update input value when selectedOptions change\n    const selectedLabels = selectedOptions.map(opt => opt.label);\n    setInputValue(selectedLabels.join(', '));\n    onChange(selectedOptions); // Notify parent of selected options change\n  }, [selectedOptions, onChange]);\n  useEffect(() => {\n    // Event listener to handle clicks outside the dropdown\n    const handleClickOutside = event => {\n      if (dropdownRef.current && !dropdownRef.current.contains(event.target)) {\n        setShowDropdown(false); // Close dropdown if clicked outside\n      }\n    };\n    document.addEventListener('mousedown', handleClickOutside);\n    return () => {\n      document.removeEventListener('mousedown', handleClickOutside);\n    };\n  }, []);\n  const toggleDropdown = () => {\n    setShowDropdown(!showDropdown); // Toggle dropdown visibility\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: styles.autocomplete,\n    children: [description && /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"description\",\n      children: description\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 98,\n      columnNumber: 23\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"dropdown\",\n      children: [/*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"text\",\n        value: inputValue,\n        onChange: handleInputChange,\n        onClick: toggleDropdown,\n        placeholder: placeholder,\n        disabled: disabled,\n        readOnly: true // Prevent user from editing input directly\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 100,\n        columnNumber: 9\n      }, this), searchMode === 'local' && /*#__PURE__*/_jsxDEV(\"div\", {\n        ref: dropdownRef,\n        className: `dropdown-menu ${showDropdown ? 'show' : ''}`,\n        children: options.map(option => /*#__PURE__*/_jsxDEV(\"label\", {\n          className: \"dropdown-item\",\n          children: [/*#__PURE__*/_jsxDEV(\"input\", {\n            type: \"checkbox\",\n            checked: selectedOptions.some(item => item.value === option.value),\n            onChange: () => handleOptionSelection(option)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 113,\n            columnNumber: 17\n          }, this), renderOption(option)]\n        }, option.value, true, {\n          fileName: _jsxFileName,\n          lineNumber: 112,\n          columnNumber: 15\n        }, this))\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 110,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 99,\n      columnNumber: 7\n    }, this), loading && /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"spinner\",\n      children: \"Loading...\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 124,\n      columnNumber: 19\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 97,\n    columnNumber: 5\n  }, this);\n};\n_s(Autocomplete, \"MZA1OPZgXobhw6lWHRInGtjpIJI=\");\n_c = Autocomplete;\nexport default Autocomplete;\nexport {};\nvar _c;\n$RefreshReg$(_c, \"Autocomplete\");","map":{"version":3,"names":["React","useState","useEffect","useRef","styles","debounce","jsxDEV","_jsxDEV","Autocomplete","description","options","placeholder","disabled","loading","onChange","renderOption","value","searchMode","asyncSearch","_s","inputValue","setInputValue","selectedOptions","setSelectedOptions","showDropdown","setShowDropdown","dropdownRef","handleAsyncSearch","query","handleInputChange","event","target","handleOptionSelection","option","isSelected","some","item","updatedOptions","filter","selectedLabels","map","opt","label","join","handleClickOutside","current","contains","document","addEventListener","removeEventListener","toggleDropdown","className","autocomplete","children","fileName","_jsxFileName","lineNumber","columnNumber","type","onClick","readOnly","ref","checked","_c","$RefreshReg$"],"sources":["/Users/choijiwon/my-projects/autocomplete-component/src/components/Autocomplete.tsx"],"sourcesContent":["import React, { useState, useEffect, useRef } from 'react';\nimport styles from './Autocomplete.module.css';\nimport debounce from '../utils/debounce';\n\nexport interface Option {\n  value: string;\n  label: string;\n}\n\ninterface AutocompleteProps {\n  description: string;\n  options: Option[];\n  placeholder: string;\n  disabled: boolean;\n  loading: boolean;\n  onChange: (selected: Option[]) => void;\n  renderOption: (option: Option) => React.ReactNode;\n  value: Option[];\n  searchMode: 'local' | 'async';\n  asyncSearch?: (query: string) => Promise<Option[]>;\n}\n\nconst Autocomplete: React.FC<AutocompleteProps> = ({\n  description,\n  options,\n  placeholder,\n  disabled,\n  loading,\n  onChange,\n  renderOption,\n  value,\n  searchMode,\n  asyncSearch,\n}) => {\n  const [inputValue, setInputValue] = useState('');\n  const [selectedOptions, setSelectedOptions] = useState<Option[]>(value); // Initialize selectedOptions with the prop value\n  const [showDropdown, setShowDropdown] = useState(false); // State to manage dropdown visibility\n\n  const dropdownRef = useRef<HTMLDivElement>(null);\n\n  const handleAsyncSearch = debounce(async (query: string) => {\n    // Async search implementation here\n  }, 300);\n\n  useEffect(() => {\n    if (searchMode === 'async') {\n      handleAsyncSearch(inputValue); // Perform async search if search mode is async\n    }\n    // No need to set filteredOptions here, it will be updated in the handleInputChange handler\n  }, [inputValue, searchMode, handleAsyncSearch]);\n\n  const handleInputChange = (event: React.ChangeEvent<HTMLInputElement>) => {\n    setInputValue(event.target.value);\n    // Local filtering logic here if search mode is local\n  };\n\n  const handleOptionSelection = (option: Option) => {\n    const isSelected = selectedOptions.some(item => item.value === option.value);\n\n    if (isSelected) {\n      // Remove the option from selectedOptions if already selected\n      const updatedOptions = selectedOptions.filter(item => item.value !== option.value);\n      setSelectedOptions(updatedOptions);\n    } else {\n      // Add the option to selectedOptions if not already selected\n      setSelectedOptions([...selectedOptions, option]);\n    }\n  };\n\n  useEffect(() => {\n    // Update input value when selectedOptions change\n    const selectedLabels = selectedOptions.map(opt => opt.label);\n    setInputValue(selectedLabels.join(', '));\n    onChange(selectedOptions); // Notify parent of selected options change\n  }, [selectedOptions, onChange]);\n\n  useEffect(() => {\n    // Event listener to handle clicks outside the dropdown\n    const handleClickOutside = (event: MouseEvent) => {\n      if (dropdownRef.current && !dropdownRef.current.contains(event.target as Node)) {\n        setShowDropdown(false); // Close dropdown if clicked outside\n      }\n    };\n\n    document.addEventListener('mousedown', handleClickOutside);\n\n    return () => {\n      document.removeEventListener('mousedown', handleClickOutside);\n    };\n  }, []);\n\n  const toggleDropdown = () => {\n    setShowDropdown(!showDropdown); // Toggle dropdown visibility\n  };\n\n  return (\n    <div className={styles.autocomplete}>\n      {description && <div className=\"description\">{description}</div>}\n      <div className=\"dropdown\">\n        <input\n          type=\"text\"\n          value={inputValue}\n          onChange={handleInputChange}\n          onClick={toggleDropdown}\n          placeholder={placeholder}\n          disabled={disabled}\n          readOnly // Prevent user from editing input directly\n        />\n        {searchMode === 'local' && (\n          <div ref={dropdownRef} className={`dropdown-menu ${showDropdown ? 'show' : ''}`}>\n            {options.map(option => (\n              <label key={option.value} className=\"dropdown-item\">\n                <input\n                  type=\"checkbox\"\n                  checked={selectedOptions.some(item => item.value === option.value)}\n                  onChange={() => handleOptionSelection(option)}\n                />\n                {renderOption(option)}\n              </label>\n            ))}\n          </div>\n        )}\n      </div>\n      {loading && <div className=\"spinner\">Loading...</div>}\n    </div>\n  );\n};\n\nexport default Autocomplete;\n\nexport { };"],"mappings":";;AAAA,OAAOA,KAAK,IAAIC,QAAQ,EAAEC,SAAS,EAAEC,MAAM,QAAQ,OAAO;AAC1D,OAAOC,MAAM,MAAM,2BAA2B;AAC9C,OAAOC,QAAQ,MAAM,mBAAmB;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAoBzC,MAAMC,YAAyC,GAAGA,CAAC;EACjDC,WAAW;EACXC,OAAO;EACPC,WAAW;EACXC,QAAQ;EACRC,OAAO;EACPC,QAAQ;EACRC,YAAY;EACZC,KAAK;EACLC,UAAU;EACVC;AACF,CAAC,KAAK;EAAAC,EAAA;EACJ,MAAM,CAACC,UAAU,EAAEC,aAAa,CAAC,GAAGpB,QAAQ,CAAC,EAAE,CAAC;EAChD,MAAM,CAACqB,eAAe,EAAEC,kBAAkB,CAAC,GAAGtB,QAAQ,CAAWe,KAAK,CAAC,CAAC,CAAC;EACzE,MAAM,CAACQ,YAAY,EAAEC,eAAe,CAAC,GAAGxB,QAAQ,CAAC,KAAK,CAAC,CAAC,CAAC;;EAEzD,MAAMyB,WAAW,GAAGvB,MAAM,CAAiB,IAAI,CAAC;EAEhD,MAAMwB,iBAAiB,GAAGtB,QAAQ,CAAC,MAAOuB,KAAa,IAAK;IAC1D;EAAA,CACD,EAAE,GAAG,CAAC;EAEP1B,SAAS,CAAC,MAAM;IACd,IAAIe,UAAU,KAAK,OAAO,EAAE;MAC1BU,iBAAiB,CAACP,UAAU,CAAC,CAAC,CAAC;IACjC;IACA;EACF,CAAC,EAAE,CAACA,UAAU,EAAEH,UAAU,EAAEU,iBAAiB,CAAC,CAAC;EAE/C,MAAME,iBAAiB,GAAIC,KAA0C,IAAK;IACxET,aAAa,CAACS,KAAK,CAACC,MAAM,CAACf,KAAK,CAAC;IACjC;EACF,CAAC;EAED,MAAMgB,qBAAqB,GAAIC,MAAc,IAAK;IAChD,MAAMC,UAAU,GAAGZ,eAAe,CAACa,IAAI,CAACC,IAAI,IAAIA,IAAI,CAACpB,KAAK,KAAKiB,MAAM,CAACjB,KAAK,CAAC;IAE5E,IAAIkB,UAAU,EAAE;MACd;MACA,MAAMG,cAAc,GAAGf,eAAe,CAACgB,MAAM,CAACF,IAAI,IAAIA,IAAI,CAACpB,KAAK,KAAKiB,MAAM,CAACjB,KAAK,CAAC;MAClFO,kBAAkB,CAACc,cAAc,CAAC;IACpC,CAAC,MAAM;MACL;MACAd,kBAAkB,CAAC,CAAC,GAAGD,eAAe,EAAEW,MAAM,CAAC,CAAC;IAClD;EACF,CAAC;EAED/B,SAAS,CAAC,MAAM;IACd;IACA,MAAMqC,cAAc,GAAGjB,eAAe,CAACkB,GAAG,CAACC,GAAG,IAAIA,GAAG,CAACC,KAAK,CAAC;IAC5DrB,aAAa,CAACkB,cAAc,CAACI,IAAI,CAAC,IAAI,CAAC,CAAC;IACxC7B,QAAQ,CAACQ,eAAe,CAAC,CAAC,CAAC;EAC7B,CAAC,EAAE,CAACA,eAAe,EAAER,QAAQ,CAAC,CAAC;EAE/BZ,SAAS,CAAC,MAAM;IACd;IACA,MAAM0C,kBAAkB,GAAId,KAAiB,IAAK;MAChD,IAAIJ,WAAW,CAACmB,OAAO,IAAI,CAACnB,WAAW,CAACmB,OAAO,CAACC,QAAQ,CAAChB,KAAK,CAACC,MAAc,CAAC,EAAE;QAC9EN,eAAe,CAAC,KAAK,CAAC,CAAC,CAAC;MAC1B;IACF,CAAC;IAEDsB,QAAQ,CAACC,gBAAgB,CAAC,WAAW,EAAEJ,kBAAkB,CAAC;IAE1D,OAAO,MAAM;MACXG,QAAQ,CAACE,mBAAmB,CAAC,WAAW,EAAEL,kBAAkB,CAAC;IAC/D,CAAC;EACH,CAAC,EAAE,EAAE,CAAC;EAEN,MAAMM,cAAc,GAAGA,CAAA,KAAM;IAC3BzB,eAAe,CAAC,CAACD,YAAY,CAAC,CAAC,CAAC;EAClC,CAAC;EAED,oBACEjB,OAAA;IAAK4C,SAAS,EAAE/C,MAAM,CAACgD,YAAa;IAAAC,QAAA,GACjC5C,WAAW,iBAAIF,OAAA;MAAK4C,SAAS,EAAC,aAAa;MAAAE,QAAA,EAAE5C;IAAW;MAAA6C,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAM,CAAC,eAChElD,OAAA;MAAK4C,SAAS,EAAC,UAAU;MAAAE,QAAA,gBACvB9C,OAAA;QACEmD,IAAI,EAAC,MAAM;QACX1C,KAAK,EAAEI,UAAW;QAClBN,QAAQ,EAAEe,iBAAkB;QAC5B8B,OAAO,EAAET,cAAe;QACxBvC,WAAW,EAAEA,WAAY;QACzBC,QAAQ,EAAEA,QAAS;QACnBgD,QAAQ,OAAC;MAAA;QAAAN,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OACV,CAAC,EACDxC,UAAU,KAAK,OAAO,iBACrBV,OAAA;QAAKsD,GAAG,EAAEnC,WAAY;QAACyB,SAAS,EAAE,iBAAiB3B,YAAY,GAAG,MAAM,GAAG,EAAE,EAAG;QAAA6B,QAAA,EAC7E3C,OAAO,CAAC8B,GAAG,CAACP,MAAM,iBACjB1B,OAAA;UAA0B4C,SAAS,EAAC,eAAe;UAAAE,QAAA,gBACjD9C,OAAA;YACEmD,IAAI,EAAC,UAAU;YACfI,OAAO,EAAExC,eAAe,CAACa,IAAI,CAACC,IAAI,IAAIA,IAAI,CAACpB,KAAK,KAAKiB,MAAM,CAACjB,KAAK,CAAE;YACnEF,QAAQ,EAAEA,CAAA,KAAMkB,qBAAqB,CAACC,MAAM;UAAE;YAAAqB,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OAC/C,CAAC,EACD1C,YAAY,CAACkB,MAAM,CAAC;QAAA,GANXA,MAAM,CAACjB,KAAK;UAAAsC,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAOjB,CACR;MAAC;QAAAH,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OACC,CACN;IAAA;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACE,CAAC,EACL5C,OAAO,iBAAIN,OAAA;MAAK4C,SAAS,EAAC,SAAS;MAAAE,QAAA,EAAC;IAAU;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAK,CAAC;EAAA;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OAClD,CAAC;AAEV,CAAC;AAACtC,EAAA,CAxGIX,YAAyC;AAAAuD,EAAA,GAAzCvD,YAAyC;AA0G/C,eAAeA,YAAY;AAE3B;AAAW,IAAAuD,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}