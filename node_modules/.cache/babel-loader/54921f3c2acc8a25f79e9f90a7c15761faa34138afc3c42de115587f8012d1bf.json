{"ast":null,"code":"var _jsxFileName = \"/Users/choijiwon/my-projects/autocomplete-component/src/components/Autocomplete.tsx\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from 'react';\nimport styles from './Autocomplete.module.css';\nimport debounce from '../utils/debounce';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst Autocomplete = ({\n  description,\n  options,\n  placeholder,\n  disabled,\n  filterOptions,\n  loading,\n  multiple,\n  onChange,\n  onInputChange,\n  renderOption,\n  value,\n  searchMode,\n  asyncSearch,\n  handleOptionClick\n}) => {\n  _s();\n  const [inputValue, setInputValue] = useState('');\n  const [filteredOptions, setFilteredOptions] = useState([]);\n  const [showOptions, setShowOptions] = useState(false); // State to manage showing options\n\n  const handleAsyncSearch = debounce(async query => {\n    if (asyncSearch) {\n      const results = await asyncSearch(query);\n      setFilteredOptions(results);\n    }\n  }, 300);\n  useEffect(() => {\n    if (searchMode === 'async' && asyncSearch) {\n      handleAsyncSearch(inputValue);\n    } else if (filterOptions) {\n      setFilteredOptions(filterOptions(options, inputValue));\n    } else {\n      setFilteredOptions(options.filter(option => option.label.toLowerCase().includes(inputValue.toLowerCase())));\n    }\n  }, [inputValue, options, filterOptions, searchMode, asyncSearch, handleAsyncSearch]);\n  const handleInputChange = event => {\n    setInputValue(event.target.value);\n    onInputChange(event.target.value);\n  };\n  const handleFocus = () => {\n    setShowOptions(true); // Show options when input is focused\n  };\n  const handleBlur = () => {\n    setShowOptions(false); // Hide options when input loses focus\n  };\n  const handleOptionSelection = option => {\n    if (multiple) {\n      // Handle multiple selections\n      const newValue = Array.isArray(value) ? [...value, option] : [option];\n      onChange(newValue);\n    } else {\n      // Single selection\n      onChange(option);\n      setInputValue(option.label); // Display selected option in input\n      setShowOptions(false); // Hide options after selection\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: styles.autocomplete,\n    children: [description && /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"description\",\n      children: description\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 94,\n      columnNumber: 23\n    }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n      type: \"text\",\n      value: inputValue,\n      onChange: handleInputChange,\n      onFocus: handleFocus,\n      onBlur: handleBlur,\n      placeholder: placeholder,\n      disabled: disabled\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 95,\n      columnNumber: 7\n    }, this), loading && /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"spinner\",\n      children: \"Loading...\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 104,\n      columnNumber: 19\n    }, this), showOptions && searchMode === 'local' &&\n    /*#__PURE__*/\n    // Show options only for synchronous search when focused\n    _jsxDEV(\"div\", {\n      className: \"autocomplete-options mt-2\",\n      children: filteredOptions.map(option => /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"p-2 cursor-pointer transition duration-300 ease-out hover:bg-gray-100\",\n        onClick: () => handleOptionSelection(option),\n        children: multiple ? /*#__PURE__*/_jsxDEV(\"label\", {\n          className: \"flex items-center\",\n          children: [/*#__PURE__*/_jsxDEV(\"input\", {\n            type: \"checkbox\",\n            checked: Array.isArray(value) && value.some(item => item.value === option.value),\n            onChange: () => handleOptionSelection(option),\n            className: \"mr-2\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 115,\n            columnNumber: 19\n          }, this), renderOption(option)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 114,\n          columnNumber: 17\n        }, this) : renderOption(option)\n      }, option.value, false, {\n        fileName: _jsxFileName,\n        lineNumber: 108,\n        columnNumber: 13\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 106,\n      columnNumber: 9\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 93,\n    columnNumber: 5\n  }, this);\n};\n_s(Autocomplete, \"0LbckvHjvaE/AoUNQHYUAhLCt+U=\");\n_c = Autocomplete;\nexport default Autocomplete;\nexport {};\nvar _c;\n$RefreshReg$(_c, \"Autocomplete\");","map":{"version":3,"names":["React","useState","useEffect","styles","debounce","jsxDEV","_jsxDEV","Autocomplete","description","options","placeholder","disabled","filterOptions","loading","multiple","onChange","onInputChange","renderOption","value","searchMode","asyncSearch","handleOptionClick","_s","inputValue","setInputValue","filteredOptions","setFilteredOptions","showOptions","setShowOptions","handleAsyncSearch","query","results","filter","option","label","toLowerCase","includes","handleInputChange","event","target","handleFocus","handleBlur","handleOptionSelection","newValue","Array","isArray","className","autocomplete","children","fileName","_jsxFileName","lineNumber","columnNumber","type","onFocus","onBlur","map","onClick","checked","some","item","_c","$RefreshReg$"],"sources":["/Users/choijiwon/my-projects/autocomplete-component/src/components/Autocomplete.tsx"],"sourcesContent":["import React, { useState, useEffect } from 'react';\nimport styles from './Autocomplete.module.css';\nimport debounce from '../utils/debounce';\n\nexport interface Option {\n  value: string;\n  label: string;\n}\n\ninterface AutocompleteProps {\n  description: string;\n  options: Option[];\n  placeholder: string;\n  disabled: boolean;\n  filterOptions?: (options: Option[], inputValue: string) => Option[];\n  loading: boolean;\n  multiple: boolean;\n  onChange: (selected: Option | Option[]) => void;\n  onInputChange: (inputValue: string) => void;\n  renderOption: (option: Option) => React.ReactNode;\n  value: Option | Option[];\n  searchMode: 'local' | 'async';\n  asyncSearch?: (query: string) => Promise<Option[]>;\n  handleOptionClick: (option: Option) => void;\n}\n\nconst Autocomplete: React.FC<AutocompleteProps> = ({\n  description,\n  options,\n  placeholder,\n  disabled,\n  filterOptions,\n  loading,\n  multiple,\n  onChange,\n  onInputChange,\n  renderOption,\n  value,\n  searchMode,\n  asyncSearch,\n  handleOptionClick,\n}) => {\n  const [inputValue, setInputValue] = useState('');\n  const [filteredOptions, setFilteredOptions] = useState<Option[]>([]);\n  const [showOptions, setShowOptions] = useState(false); // State to manage showing options\n\n  const handleAsyncSearch = debounce(async (query: string) => {\n    if (asyncSearch) {\n      const results = await asyncSearch(query);\n      setFilteredOptions(results);\n    }\n  }, 300);\n\n  useEffect(() => {\n    if (searchMode === 'async' && asyncSearch) {\n      handleAsyncSearch(inputValue);\n    } else if (filterOptions) {\n      setFilteredOptions(filterOptions(options, inputValue));\n    } else {\n      setFilteredOptions(options.filter(option =>\n        option.label.toLowerCase().includes(inputValue.toLowerCase())\n      ));\n    }\n  }, [inputValue, options, filterOptions, searchMode, asyncSearch, handleAsyncSearch]);\n\n  const handleInputChange = (event: React.ChangeEvent<HTMLInputElement>) => {\n    setInputValue(event.target.value);\n    onInputChange(event.target.value);\n  };\n\n  const handleFocus = () => {\n    setShowOptions(true); // Show options when input is focused\n  };\n\n  const handleBlur = () => {\n    setShowOptions(false); // Hide options when input loses focus\n  };\n\n  const handleOptionSelection = (option: Option) => {\n    if (multiple) {\n      // Handle multiple selections\n      const newValue = Array.isArray(value) ? [...value, option] : [option];\n      onChange(newValue);\n    } else {\n      // Single selection\n      onChange(option);\n      setInputValue(option.label); // Display selected option in input\n      setShowOptions(false); // Hide options after selection\n    }\n  };\n\n  return (\n    <div className={styles.autocomplete}>\n      {description && <div className=\"description\">{description}</div>}\n      <input\n        type=\"text\"\n        value={inputValue}\n        onChange={handleInputChange}\n        onFocus={handleFocus}\n        onBlur={handleBlur}\n        placeholder={placeholder}\n        disabled={disabled}\n      />\n      {loading && <div className=\"spinner\">Loading...</div>}\n      {showOptions && searchMode === 'local' && ( // Show options only for synchronous search when focused\n        <div className=\"autocomplete-options mt-2\">\n          {filteredOptions.map(option => (\n            <div\n              key={option.value}\n              className=\"p-2 cursor-pointer transition duration-300 ease-out hover:bg-gray-100\"\n              onClick={() => handleOptionSelection(option)}\n            >\n              {multiple ? (\n                <label className=\"flex items-center\">\n                  <input\n                    type=\"checkbox\"\n                    checked={Array.isArray(value) && value.some(item => item.value === option.value)}\n                    onChange={() => handleOptionSelection(option)}\n                    className=\"mr-2\"\n                  />\n                  {renderOption(option)}\n                </label>\n              ) : (\n                renderOption(option)\n              )}\n            </div>\n          ))}\n        </div>\n      )}\n\n    </div>\n  );\n};\n\nexport default Autocomplete;\n\nexport { };"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}