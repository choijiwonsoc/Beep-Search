{"ast":null,"code":"var _jsxFileName = \"/Users/choijiwon/my-projects/autocomplete-component/src/components/Autocomplete.tsx\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from 'react';\nimport styles from './Autocomplete.module.css';\nimport debounce from '../utils/debounce';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst Autocomplete = ({\n  description,\n  options,\n  placeholder,\n  disabled,\n  loading,\n  onChange,\n  renderOption,\n  value,\n  searchMode,\n  asyncSearch\n}) => {\n  _s();\n  const [inputValue, setInputValue] = useState('');\n  const [selectedOptions, setSelectedOptions] = useState(value); // Initialize selectedOptions with the prop value\n  const [showDropdown, setShowDropdown] = useState(false); // State to manage dropdown visibility\n\n  const handleAsyncSearch = debounce(async query => {\n    // Async search implementation here\n  }, 300);\n  useEffect(() => {\n    if (searchMode === 'async') {\n      handleAsyncSearch(inputValue); // Perform async search if search mode is async\n    }\n    // No need to set filteredOptions here, it will be updated in the handleInputChange handler\n  }, [inputValue, searchMode, handleAsyncSearch]);\n  const handleInputChange = event => {\n    setInputValue(event.target.value);\n    // Local filtering logic here if search mode is local\n  };\n  const handleOptionSelection = option => {\n    const isSelected = selectedOptions.some(item => item.value === option.value);\n    if (isSelected) {\n      // Remove the option from selectedOptions if already selected\n      const updatedOptions = selectedOptions.filter(item => item.value !== option.value);\n      setSelectedOptions(updatedOptions);\n    } else {\n      // Add the option to selectedOptions if not already selected\n      setSelectedOptions([...selectedOptions, option]);\n    }\n    // No need to remove option if already selected\n  };\n  useEffect(() => {\n    // Update input value when selectedOptions change\n    const selectedLabels = selectedOptions.map(opt => opt.label);\n    setInputValue(selectedLabels.join(', '));\n    onChange(selectedOptions); // Notify parent of selected options change\n  }, [selectedOptions, onChange]);\n  const toggleDropdown = () => {\n    setShowDropdown(!showDropdown); // Toggle dropdown visibility\n  };\n  const handleFocus = () => {\n    setShowDropdown(true); // Show dropdown when input is focused\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: styles.autocomplete,\n    children: [description && /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"description\",\n      children: description\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 86,\n      columnNumber: 23\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: styles.autocomplete,\n      onClick: handleFocus,\n      children: [/*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"text\",\n        value: inputValue,\n        onChange: handleInputChange,\n        onClick: toggleDropdown,\n        placeholder: placeholder,\n        disabled: disabled,\n        readOnly: true // Prevent user from editing input directly\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 88,\n        columnNumber: 9\n      }, this), searchMode == 'local' && showDropdown && /*#__PURE__*/_jsxDEV(\"div\", {\n        className: `dropdown-menu ${showDropdown ? 'show' : ''}`,\n        children: options.map(option => /*#__PURE__*/_jsxDEV(\"label\", {\n          className: \"dropdown-item\",\n          children: [/*#__PURE__*/_jsxDEV(\"input\", {\n            type: \"checkbox\",\n            checked: selectedOptions.some(item => item.value === option.value),\n            onChange: () => handleOptionSelection(option)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 100,\n            columnNumber: 15\n          }, this), renderOption(option)]\n        }, option.value, true, {\n          fileName: _jsxFileName,\n          lineNumber: 99,\n          columnNumber: 13\n        }, this))\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 97,\n        columnNumber: 50\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 87,\n      columnNumber: 7\n    }, this), loading && /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"spinner\",\n      children: \"Loading...\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 111,\n      columnNumber: 19\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 85,\n    columnNumber: 5\n  }, this);\n};\n_s(Autocomplete, \"vVlaM7LhlZIPkvHp6MxAfLcfIEc=\");\n_c = Autocomplete;\nexport default Autocomplete;\nexport {};\nvar _c;\n$RefreshReg$(_c, \"Autocomplete\");","map":{"version":3,"names":["React","useState","useEffect","styles","debounce","jsxDEV","_jsxDEV","Autocomplete","description","options","placeholder","disabled","loading","onChange","renderOption","value","searchMode","asyncSearch","_s","inputValue","setInputValue","selectedOptions","setSelectedOptions","showDropdown","setShowDropdown","handleAsyncSearch","query","handleInputChange","event","target","handleOptionSelection","option","isSelected","some","item","updatedOptions","filter","selectedLabels","map","opt","label","join","toggleDropdown","handleFocus","className","autocomplete","children","fileName","_jsxFileName","lineNumber","columnNumber","onClick","type","readOnly","checked","_c","$RefreshReg$"],"sources":["/Users/choijiwon/my-projects/autocomplete-component/src/components/Autocomplete.tsx"],"sourcesContent":["import React, { useState, useEffect } from 'react';\nimport styles from './Autocomplete.module.css';\nimport debounce from '../utils/debounce';\n\nexport interface Option {\n  value: string;\n  label: string;\n}\n\ninterface AutocompleteProps {\n  description: string;\n  options: Option[];\n  placeholder: string;\n  disabled: boolean;\n  loading: boolean;\n  onChange: (selected: Option[]) => void;\n  renderOption: (option: Option) => React.ReactNode;\n  value: Option[];\n  searchMode: 'local' | 'async';\n  asyncSearch?: (query: string) => Promise<Option[]>;\n}\n\nconst Autocomplete: React.FC<AutocompleteProps> = ({\n  description,\n  options,\n  placeholder,\n  disabled,\n  loading,\n  onChange,\n  renderOption,\n  value,\n  searchMode,\n  asyncSearch,\n}) => {\n  const [inputValue, setInputValue] = useState('');\n  const [selectedOptions, setSelectedOptions] = useState<Option[]>(value); // Initialize selectedOptions with the prop value\n  const [showDropdown, setShowDropdown] = useState(false); // State to manage dropdown visibility\n\n  const handleAsyncSearch = debounce(async (query: string) => {\n    // Async search implementation here\n  }, 300);\n\n  useEffect(() => {\n    if (searchMode === 'async') {\n      handleAsyncSearch(inputValue); // Perform async search if search mode is async\n    }\n    // No need to set filteredOptions here, it will be updated in the handleInputChange handler\n  }, [inputValue, searchMode, handleAsyncSearch]);\n\n  const handleInputChange = (event: React.ChangeEvent<HTMLInputElement>) => {\n    setInputValue(event.target.value);\n    // Local filtering logic here if search mode is local\n  };\n\n  const handleOptionSelection = (option: Option) => {\n    const isSelected = selectedOptions.some(item => item.value === option.value);\n\n    if (isSelected) {\n        // Remove the option from selectedOptions if already selected\n        const updatedOptions = selectedOptions.filter(item => item.value !== option.value);\n        setSelectedOptions(updatedOptions);\n      } else {\n        // Add the option to selectedOptions if not already selected\n        setSelectedOptions([...selectedOptions, option]);\n      }\n    // No need to remove option if already selected\n  };\n\n  useEffect(() => {\n    // Update input value when selectedOptions change\n    const selectedLabels = selectedOptions.map(opt => opt.label);\n    setInputValue(selectedLabels.join(', '));\n    onChange(selectedOptions); // Notify parent of selected options change\n  }, [selectedOptions, onChange]);\n\n  const toggleDropdown = () => {\n    setShowDropdown(!showDropdown); // Toggle dropdown visibility\n  };\n\n  const handleFocus = () => {\n    setShowDropdown(true); // Show dropdown when input is focused\n  };\n\n  return (\n    <div className={styles.autocomplete}>\n      {description && <div className=\"description\">{description}</div>}\n      <div className={styles.autocomplete} onClick={handleFocus}>\n        <input\n          type=\"text\"\n          value={inputValue}\n          onChange={handleInputChange}\n          onClick={toggleDropdown}\n          placeholder={placeholder}\n          disabled={disabled}\n          readOnly // Prevent user from editing input directly\n        />\n        {searchMode=='local' && showDropdown && (<div className={`dropdown-menu ${showDropdown ? 'show' : ''}`}>\n          {options.map(option => (\n            <label key={option.value} className=\"dropdown-item\">\n              <input\n                type=\"checkbox\"\n                checked={selectedOptions.some(item => item.value === option.value)}\n                onChange={() => handleOptionSelection(option)}\n              />\n              {renderOption(option)}\n            </label>\n          ))}\n        </div>\n        )}\n      </div>\n      {loading && <div className=\"spinner\">Loading...</div>}\n    </div>\n  );\n};\n\nexport default Autocomplete;\n\nexport { };"],"mappings":";;AAAA,OAAOA,KAAK,IAAIC,QAAQ,EAAEC,SAAS,QAAQ,OAAO;AAClD,OAAOC,MAAM,MAAM,2BAA2B;AAC9C,OAAOC,QAAQ,MAAM,mBAAmB;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAoBzC,MAAMC,YAAyC,GAAGA,CAAC;EACjDC,WAAW;EACXC,OAAO;EACPC,WAAW;EACXC,QAAQ;EACRC,OAAO;EACPC,QAAQ;EACRC,YAAY;EACZC,KAAK;EACLC,UAAU;EACVC;AACF,CAAC,KAAK;EAAAC,EAAA;EACJ,MAAM,CAACC,UAAU,EAAEC,aAAa,CAAC,GAAGnB,QAAQ,CAAC,EAAE,CAAC;EAChD,MAAM,CAACoB,eAAe,EAAEC,kBAAkB,CAAC,GAAGrB,QAAQ,CAAWc,KAAK,CAAC,CAAC,CAAC;EACzE,MAAM,CAACQ,YAAY,EAAEC,eAAe,CAAC,GAAGvB,QAAQ,CAAC,KAAK,CAAC,CAAC,CAAC;;EAEzD,MAAMwB,iBAAiB,GAAGrB,QAAQ,CAAC,MAAOsB,KAAa,IAAK;IAC1D;EAAA,CACD,EAAE,GAAG,CAAC;EAEPxB,SAAS,CAAC,MAAM;IACd,IAAIc,UAAU,KAAK,OAAO,EAAE;MAC1BS,iBAAiB,CAACN,UAAU,CAAC,CAAC,CAAC;IACjC;IACA;EACF,CAAC,EAAE,CAACA,UAAU,EAAEH,UAAU,EAAES,iBAAiB,CAAC,CAAC;EAE/C,MAAME,iBAAiB,GAAIC,KAA0C,IAAK;IACxER,aAAa,CAACQ,KAAK,CAACC,MAAM,CAACd,KAAK,CAAC;IACjC;EACF,CAAC;EAED,MAAMe,qBAAqB,GAAIC,MAAc,IAAK;IAChD,MAAMC,UAAU,GAAGX,eAAe,CAACY,IAAI,CAACC,IAAI,IAAIA,IAAI,CAACnB,KAAK,KAAKgB,MAAM,CAAChB,KAAK,CAAC;IAE5E,IAAIiB,UAAU,EAAE;MACZ;MACA,MAAMG,cAAc,GAAGd,eAAe,CAACe,MAAM,CAACF,IAAI,IAAIA,IAAI,CAACnB,KAAK,KAAKgB,MAAM,CAAChB,KAAK,CAAC;MAClFO,kBAAkB,CAACa,cAAc,CAAC;IACpC,CAAC,MAAM;MACL;MACAb,kBAAkB,CAAC,CAAC,GAAGD,eAAe,EAAEU,MAAM,CAAC,CAAC;IAClD;IACF;EACF,CAAC;EAED7B,SAAS,CAAC,MAAM;IACd;IACA,MAAMmC,cAAc,GAAGhB,eAAe,CAACiB,GAAG,CAACC,GAAG,IAAIA,GAAG,CAACC,KAAK,CAAC;IAC5DpB,aAAa,CAACiB,cAAc,CAACI,IAAI,CAAC,IAAI,CAAC,CAAC;IACxC5B,QAAQ,CAACQ,eAAe,CAAC,CAAC,CAAC;EAC7B,CAAC,EAAE,CAACA,eAAe,EAAER,QAAQ,CAAC,CAAC;EAE/B,MAAM6B,cAAc,GAAGA,CAAA,KAAM;IAC3BlB,eAAe,CAAC,CAACD,YAAY,CAAC,CAAC,CAAC;EAClC,CAAC;EAED,MAAMoB,WAAW,GAAGA,CAAA,KAAM;IACxBnB,eAAe,CAAC,IAAI,CAAC,CAAC,CAAC;EACzB,CAAC;EAED,oBACElB,OAAA;IAAKsC,SAAS,EAAEzC,MAAM,CAAC0C,YAAa;IAAAC,QAAA,GACjCtC,WAAW,iBAAIF,OAAA;MAAKsC,SAAS,EAAC,aAAa;MAAAE,QAAA,EAAEtC;IAAW;MAAAuC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAM,CAAC,eAChE5C,OAAA;MAAKsC,SAAS,EAAEzC,MAAM,CAAC0C,YAAa;MAACM,OAAO,EAAER,WAAY;MAAAG,QAAA,gBACxDxC,OAAA;QACE8C,IAAI,EAAC,MAAM;QACXrC,KAAK,EAAEI,UAAW;QAClBN,QAAQ,EAAEc,iBAAkB;QAC5BwB,OAAO,EAAET,cAAe;QACxBhC,WAAW,EAAEA,WAAY;QACzBC,QAAQ,EAAEA,QAAS;QACnB0C,QAAQ,OAAC;MAAA;QAAAN,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OACV,CAAC,EACDlC,UAAU,IAAE,OAAO,IAAIO,YAAY,iBAAKjB,OAAA;QAAKsC,SAAS,EAAE,iBAAiBrB,YAAY,GAAG,MAAM,GAAG,EAAE,EAAG;QAAAuB,QAAA,EACpGrC,OAAO,CAAC6B,GAAG,CAACP,MAAM,iBACjBzB,OAAA;UAA0BsC,SAAS,EAAC,eAAe;UAAAE,QAAA,gBACjDxC,OAAA;YACE8C,IAAI,EAAC,UAAU;YACfE,OAAO,EAAEjC,eAAe,CAACY,IAAI,CAACC,IAAI,IAAIA,IAAI,CAACnB,KAAK,KAAKgB,MAAM,CAAChB,KAAK,CAAE;YACnEF,QAAQ,EAAEA,CAAA,KAAMiB,qBAAqB,CAACC,MAAM;UAAE;YAAAgB,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OAC/C,CAAC,EACDpC,YAAY,CAACiB,MAAM,CAAC;QAAA,GANXA,MAAM,CAAChB,KAAK;UAAAgC,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAOjB,CACR;MAAC;QAAAH,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OACC,CACJ;IAAA;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACE,CAAC,EACLtC,OAAO,iBAAIN,OAAA;MAAKsC,SAAS,EAAC,SAAS;MAAAE,QAAA,EAAC;IAAU;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAK,CAAC;EAAA;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OAClD,CAAC;AAEV,CAAC;AAAChC,EAAA,CA3FIX,YAAyC;AAAAgD,EAAA,GAAzChD,YAAyC;AA6F/C,eAAeA,YAAY;AAE3B;AAAW,IAAAgD,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}