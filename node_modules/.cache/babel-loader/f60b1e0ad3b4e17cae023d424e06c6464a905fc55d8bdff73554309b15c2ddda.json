{"ast":null,"code":"var _jsxFileName = \"/Users/choijiwon/my-projects/autocomplete-component/src/App.tsx\",\n  _s = $RefreshSig$();\nimport React, { useState } from 'react';\nimport './App.css';\nimport Autocomplete from './components/Autocomplete';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst App = () => {\n  _s();\n  const options = [{\n    value: 'apple',\n    label: 'Apple'\n  }, {\n    value: 'banana',\n    label: 'Banana'\n  }, {\n    value: 'cherry',\n    label: 'Cherry'\n  }];\n  const [value, setValue] = useState([]); // State to manage selected value(s)\n\n  const handleInputChange = inputValue => {\n    console.log('Input changed:', inputValue);\n  };\n  const handleChange = selected => {\n    console.log('Selected:', selected);\n    setValue(selected); // Update selected value(s) in state\n  };\n  const defaultFilterOptions = (options, inputValue) => {\n    return options.filter(option => option.label.toLowerCase().includes(inputValue.toLowerCase()));\n  };\n\n  // Example render option function\n  const renderOption = option => {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      children: option.label\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 31,\n      columnNumber: 12\n    }, this);\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"App\",\n    children: [/*#__PURE__*/_jsxDEV(\"header\", {\n      className: \"App-header\",\n      children: /*#__PURE__*/_jsxDEV(\"h1\", {\n        children: \"Autocomplete Component Example\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 37,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 36,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"main\", {\n      className: \"App-main\",\n      children: /*#__PURE__*/_jsxDEV(Autocomplete, {\n        description: \"Synchronous Search\",\n        options: options,\n        onInputChange: handleInputChange,\n        onChange: handleChange,\n        placeholder: \"Search...\",\n        disabled: false,\n        filterOptions: defaultFilterOptions,\n        loading: false,\n        multiple: false,\n        renderOption: renderOption,\n        value: value,\n        searchMode: \"local\" // Synchronous search mode\n        ,\n        handleOptionClick: option => setValue(option) // Single click handler for synchronous search\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 40,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 39,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 35,\n    columnNumber: 5\n  }, this);\n};\n_s(App, \"nXyUXLCLqjbO8MhWxJGJNfpoKZM=\");\n_c = App;\nexport default App;\nvar _c;\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["React","useState","Autocomplete","jsxDEV","_jsxDEV","App","_s","options","value","label","setValue","handleInputChange","inputValue","console","log","handleChange","selected","defaultFilterOptions","filter","option","toLowerCase","includes","renderOption","children","fileName","_jsxFileName","lineNumber","columnNumber","className","description","onInputChange","onChange","placeholder","disabled","filterOptions","loading","multiple","searchMode","handleOptionClick","_c","$RefreshReg$"],"sources":["/Users/choijiwon/my-projects/autocomplete-component/src/App.tsx"],"sourcesContent":["import React, { useState } from 'react';\nimport './App.css';\nimport Autocomplete, { Option } from './components/Autocomplete'; \n\nconst App: React.FC = () => {\n  const options: Option[] = [\n    { value: 'apple', label: 'Apple' },\n    { value: 'banana', label: 'Banana' },\n    { value: 'cherry', label: 'Cherry' },\n  ];\n\n  const [value, setValue] = useState<Option | Option[]>([]); // State to manage selected value(s)\n\n  const handleInputChange = (inputValue: string) => {\n    console.log('Input changed:', inputValue);\n  };\n\n  const handleChange = (selected: Option | Option[]) => {\n    console.log('Selected:', selected);\n    setValue(selected); // Update selected value(s) in state\n  };\n\n  const defaultFilterOptions = (options: Option[], inputValue: string) => {\n    return options.filter(option =>\n      option.label.toLowerCase().includes(inputValue.toLowerCase())\n    );\n  };\n\n  // Example render option function\n  const renderOption = (option: Option) => {\n    return <div>{option.label}</div>;\n  };\n\n  return (\n    <div className=\"App\">\n      <header className=\"App-header\">\n        <h1>Autocomplete Component Example</h1>\n      </header>\n      <main className=\"App-main\">\n        <Autocomplete\n          description=\"Synchronous Search\"\n          options={options}\n          onInputChange={handleInputChange}\n          onChange={handleChange}\n          placeholder=\"Search...\"\n          disabled={false}\n          filterOptions={defaultFilterOptions}\n          loading={false}\n          multiple={false}\n          renderOption={renderOption}\n          value={value}\n          searchMode=\"local\" // Synchronous search mode\n          handleOptionClick={(option: Option) => setValue(option)} // Single click handler for synchronous search\n        />\n        {/* Example for Asynchronous Search */}\n        {/* <Autocomplete\n          description=\"Asynchronous Search\"\n          options={[]} // Empty options array\n          onInputChange={handleInputChange}\n          onChange={handleChange}\n          placeholder=\"Search...\"\n          disabled={false}\n          loading={false}\n          multiple={false}\n          renderOption={renderOption}\n          value={value}\n          searchMode=\"async\" // Asynchronous search mode\n          asyncSearch={(query: string) => {\n            // Implement async search function here\n            return Promise.resolve([]);\n          }}\n          handleOptionClick={(option: Option) => setValue(option)}\n        /> */}\n      </main>\n    </div>\n  );\n};\n\nexport default App;\n"],"mappings":";;AAAA,OAAOA,KAAK,IAAIC,QAAQ,QAAQ,OAAO;AACvC,OAAO,WAAW;AAClB,OAAOC,YAAY,MAAkB,2BAA2B;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAEjE,MAAMC,GAAa,GAAGA,CAAA,KAAM;EAAAC,EAAA;EAC1B,MAAMC,OAAiB,GAAG,CACxB;IAAEC,KAAK,EAAE,OAAO;IAAEC,KAAK,EAAE;EAAQ,CAAC,EAClC;IAAED,KAAK,EAAE,QAAQ;IAAEC,KAAK,EAAE;EAAS,CAAC,EACpC;IAAED,KAAK,EAAE,QAAQ;IAAEC,KAAK,EAAE;EAAS,CAAC,CACrC;EAED,MAAM,CAACD,KAAK,EAAEE,QAAQ,CAAC,GAAGT,QAAQ,CAAoB,EAAE,CAAC,CAAC,CAAC;;EAE3D,MAAMU,iBAAiB,GAAIC,UAAkB,IAAK;IAChDC,OAAO,CAACC,GAAG,CAAC,gBAAgB,EAAEF,UAAU,CAAC;EAC3C,CAAC;EAED,MAAMG,YAAY,GAAIC,QAA2B,IAAK;IACpDH,OAAO,CAACC,GAAG,CAAC,WAAW,EAAEE,QAAQ,CAAC;IAClCN,QAAQ,CAACM,QAAQ,CAAC,CAAC,CAAC;EACtB,CAAC;EAED,MAAMC,oBAAoB,GAAGA,CAACV,OAAiB,EAAEK,UAAkB,KAAK;IACtE,OAAOL,OAAO,CAACW,MAAM,CAACC,MAAM,IAC1BA,MAAM,CAACV,KAAK,CAACW,WAAW,CAAC,CAAC,CAACC,QAAQ,CAACT,UAAU,CAACQ,WAAW,CAAC,CAAC,CAC9D,CAAC;EACH,CAAC;;EAED;EACA,MAAME,YAAY,GAAIH,MAAc,IAAK;IACvC,oBAAOf,OAAA;MAAAmB,QAAA,EAAMJ,MAAM,CAACV;IAAK;MAAAe,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAM,CAAC;EAClC,CAAC;EAED,oBACEvB,OAAA;IAAKwB,SAAS,EAAC,KAAK;IAAAL,QAAA,gBAClBnB,OAAA;MAAQwB,SAAS,EAAC,YAAY;MAAAL,QAAA,eAC5BnB,OAAA;QAAAmB,QAAA,EAAI;MAA8B;QAAAC,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAI;IAAC;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACjC,CAAC,eACTvB,OAAA;MAAMwB,SAAS,EAAC,UAAU;MAAAL,QAAA,eACxBnB,OAAA,CAACF,YAAY;QACX2B,WAAW,EAAC,oBAAoB;QAChCtB,OAAO,EAAEA,OAAQ;QACjBuB,aAAa,EAAEnB,iBAAkB;QACjCoB,QAAQ,EAAEhB,YAAa;QACvBiB,WAAW,EAAC,WAAW;QACvBC,QAAQ,EAAE,KAAM;QAChBC,aAAa,EAAEjB,oBAAqB;QACpCkB,OAAO,EAAE,KAAM;QACfC,QAAQ,EAAE,KAAM;QAChBd,YAAY,EAAEA,YAAa;QAC3Bd,KAAK,EAAEA,KAAM;QACb6B,UAAU,EAAC,OAAO,CAAC;QAAA;QACnBC,iBAAiB,EAAGnB,MAAc,IAAKT,QAAQ,CAACS,MAAM,CAAE,CAAC;MAAA;QAAAK,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAC1D;IAAC;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAoBE,CAAC;EAAA;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACJ,CAAC;AAEV,CAAC;AAACrB,EAAA,CAxEID,GAAa;AAAAkC,EAAA,GAAblC,GAAa;AA0EnB,eAAeA,GAAG;AAAC,IAAAkC,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}