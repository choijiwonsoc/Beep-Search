{"ast":null,"code":"var _jsxFileName = \"/Users/choijiwon/my-projects/autocomplete-component/src/components/Autocomplete.tsx\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from 'react';\nimport styles from './Autocomplete.module.css';\nimport debounce from '../utils/debounce';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst Autocomplete = ({\n  description,\n  options,\n  placeholder,\n  disabled,\n  loading,\n  onChange,\n  renderOption,\n  value,\n  searchMode,\n  asyncSearch\n}) => {\n  _s();\n  const [inputValue, setInputValue] = useState('');\n  const [selectedOptions, setSelectedOptions] = useState(value); // Initialize selectedOptions with the prop value\n  const [showDropdown, setShowDropdown] = useState(false); // State to manage dropdown visibility\n\n  const handleAsyncSearch = debounce(async query => {\n    if (asyncSearch) {\n      const results = await asyncSearch(query);\n      setFilteredOptions(results);\n    }\n  }, 300);\n  const handleInputChange = event => {\n    const value = event.target.value;\n    if (searchMode === 'async') {\n      handleAsyncSearch(value);\n    } else {\n      setInputValue(value);\n    }\n    // Local filtering logic here if search mode is local\n  };\n  const handleOptionSelection = option => {\n    const isSelected = selectedOptions.some(item => item.value === option.value);\n    if (isSelected) {\n      // Remove the option from selectedOptions if already selected\n      const updatedOptions = selectedOptions.filter(item => item.value !== option.value);\n      setSelectedOptions(updatedOptions);\n    } else {\n      // Add the option to selectedOptions if not already selected\n      setSelectedOptions([...selectedOptions, option]);\n    }\n    // No need to remove option if already selected\n  };\n  useEffect(() => {\n    // Update input value when selectedOptions change\n    const selectedLabels = selectedOptions.map(opt => opt.label);\n    setInputValue(selectedLabels.join(', '));\n    onChange(selectedOptions); // Notify parent of selected options change\n  }, [selectedOptions, onChange]);\n  const toggleDropdown = () => {\n    setShowDropdown(!showDropdown); // Toggle dropdown visibility\n  };\n  const handleFocus = () => {\n    setShowDropdown(true); // Show dropdown when input is focused\n  };\n  const handleBlur = () => {\n    setShowDropdown(false); // Hide dropdown when input loses focus\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: styles.autocomplete,\n    children: [description && /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"description\",\n      children: description\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 91,\n      columnNumber: 29\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: styles.autocomplete,\n      onChange: handleBlur,\n      onClick: handleFocus,\n      children: [/*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"text\",\n        value: inputValue,\n        onChange: handleInputChange,\n        onClick: toggleDropdown,\n        tabIndex: 0,\n        placeholder: placeholder,\n        disabled: disabled,\n        readOnly: true // Prevent user from editing input directly\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 93,\n        columnNumber: 17\n      }, this), searchMode == 'local' && showDropdown && /*#__PURE__*/_jsxDEV(\"div\", {\n        className: `dropdown-menu ${showDropdown ? 'show' : ''}`,\n        children: options.map(option => /*#__PURE__*/_jsxDEV(\"label\", {\n          className: \"dropdown-item\",\n          children: [/*#__PURE__*/_jsxDEV(\"input\", {\n            type: \"checkbox\",\n            tabIndex: 0,\n            checked: selectedOptions.some(item => item.value === option.value),\n            onChange: () => handleOptionSelection(option)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 106,\n            columnNumber: 29\n          }, this), renderOption(option)]\n        }, option.value, true, {\n          fileName: _jsxFileName,\n          lineNumber: 105,\n          columnNumber: 25\n        }, this))\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 103,\n        columnNumber: 60\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 92,\n      columnNumber: 13\n    }, this), loading && /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"spinner\",\n      children: \"Loading...\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 119,\n      columnNumber: 25\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 90,\n    columnNumber: 9\n  }, this);\n};\n_s(Autocomplete, \"ZSbsa3VQHDzlLg0K44KPWYSlYkw=\");\n_c = Autocomplete;\nexport default Autocomplete;\nexport {};\nvar _c;\n$RefreshReg$(_c, \"Autocomplete\");","map":{"version":3,"names":["React","useState","useEffect","styles","debounce","jsxDEV","_jsxDEV","Autocomplete","description","options","placeholder","disabled","loading","onChange","renderOption","value","searchMode","asyncSearch","_s","inputValue","setInputValue","selectedOptions","setSelectedOptions","showDropdown","setShowDropdown","handleAsyncSearch","query","results","setFilteredOptions","handleInputChange","event","target","handleOptionSelection","option","isSelected","some","item","updatedOptions","filter","selectedLabels","map","opt","label","join","toggleDropdown","handleFocus","handleBlur","className","autocomplete","children","fileName","_jsxFileName","lineNumber","columnNumber","onClick","type","tabIndex","readOnly","checked","_c","$RefreshReg$"],"sources":["/Users/choijiwon/my-projects/autocomplete-component/src/components/Autocomplete.tsx"],"sourcesContent":["import React, { useState, useEffect } from 'react';\nimport styles from './Autocomplete.module.css';\nimport debounce from '../utils/debounce';\n\nexport interface Option {\n    value: string;\n    label: string;\n}\n\ninterface AutocompleteProps {\n    description: string;\n    options: Option[];\n    placeholder: string;\n    disabled: boolean;\n    loading: boolean;\n    onChange: (selected: Option[]) => void;\n    renderOption: (option: Option) => React.ReactNode;\n    value: Option[];\n    searchMode: 'local' | 'async';\n    asyncSearch?: (query: string) => Promise<Option[]>;\n}\n\nconst Autocomplete: React.FC<AutocompleteProps> = ({\n    description,\n    options,\n    placeholder,\n    disabled,\n    loading,\n    onChange,\n    renderOption,\n    value,\n    searchMode,\n    asyncSearch,\n}) => {\n    const [inputValue, setInputValue] = useState('');\n    const [selectedOptions, setSelectedOptions] = useState<Option[]>(value); // Initialize selectedOptions with the prop value\n    const [showDropdown, setShowDropdown] = useState(false); // State to manage dropdown visibility\n\n    const handleAsyncSearch = debounce(async (query: string) => {\n        if (asyncSearch) {\n          const results = await asyncSearch(query);\n          setFilteredOptions(results);\n        }\n      }, 300);\n\n    const handleInputChange = (event: React.ChangeEvent<HTMLInputElement>) => {\n        const value = event.target.value;\n        if (searchMode === 'async') {\n            handleAsyncSearch(value);\n        } else {\n            setInputValue(value);\n        }\n        // Local filtering logic here if search mode is local\n    };\n\n    const handleOptionSelection = (option: Option) => {\n        const isSelected = selectedOptions.some(item => item.value === option.value);\n\n        if (isSelected) {\n            // Remove the option from selectedOptions if already selected\n            const updatedOptions = selectedOptions.filter(item => item.value !== option.value);\n            setSelectedOptions(updatedOptions);\n        } else {\n            // Add the option to selectedOptions if not already selected\n            setSelectedOptions([...selectedOptions, option]);\n        }\n        // No need to remove option if already selected\n    };\n\n    useEffect(() => {\n        // Update input value when selectedOptions change\n        const selectedLabels = selectedOptions.map(opt => opt.label);\n        setInputValue(selectedLabels.join(', '));\n        onChange(selectedOptions); // Notify parent of selected options change\n    }, [selectedOptions, onChange]);\n\n    const toggleDropdown = () => {\n        setShowDropdown(!showDropdown); // Toggle dropdown visibility\n    };\n\n    const handleFocus = () => {\n        setShowDropdown(true); // Show dropdown when input is focused\n    };\n\n    const handleBlur = () => {\n        setShowDropdown(false); // Hide dropdown when input loses focus\n    };\n\n    return (\n        <div className={styles.autocomplete}>\n            {description && <div className=\"description\">{description}</div>}\n            <div className={styles.autocomplete} onChange={handleBlur} onClick={handleFocus}>\n                <input\n                    type=\"text\"\n                    value={inputValue}\n                    onChange={handleInputChange}\n                    onClick={toggleDropdown}\n                    tabIndex={0}\n                    placeholder={placeholder}\n                    disabled={disabled}\n                    readOnly // Prevent user from editing input directly\n                />\n                {searchMode == 'local' && showDropdown && (<div className={`dropdown-menu ${showDropdown ? 'show' : ''}`}>\n                    {options.map(option => (\n                        <label key={option.value} className=\"dropdown-item\">\n                            <input\n                                type=\"checkbox\"\n                                tabIndex={0}\n                                checked={selectedOptions.some(item => item.value === option.value)}\n                                onChange={() => handleOptionSelection(option)}\n                            />\n                            {renderOption(option)}\n                        </label>\n                    ))}\n                </div>\n                )}\n                \n            </div>\n            {loading && <div className=\"spinner\">Loading...</div>}\n        </div>\n    );\n};\n\nexport default Autocomplete;\n\nexport { };"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}