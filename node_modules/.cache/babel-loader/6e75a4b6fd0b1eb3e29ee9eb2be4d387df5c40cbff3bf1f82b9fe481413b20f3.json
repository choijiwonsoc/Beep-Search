{"ast":null,"code":"var _jsxFileName = \"/Users/choijiwon/my-projects/autocomplete-component/src/components/Autocomplete.tsx\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from 'react';\nimport debounce from '../utils/debounce';\nimport styles from './Autocomplete.module.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst Autocomplete = ({\n  description,\n  options,\n  placeholder,\n  disabled,\n  loading,\n  onChange,\n  renderOption,\n  value,\n  searchMode,\n  asyncSearch\n}) => {\n  _s();\n  const [inputValue, setInputValue] = useState('');\n  const [selectedOptions, setSelectedOptions] = useState(value); // Initialize selectedOptions with the prop value\n  const [showDropdown, setShowDropdown] = useState(false); // State to manage dropdown visibility\n  const [filteredOptions, setFilteredOptions] = useState(options); // State to hold filtered options for async search\n\n  const handleAsyncSearch = debounce(async query => {\n    if (asyncSearch) {\n      const results = await asyncSearch(query);\n      setFilteredOptions(results);\n    }\n  }, 300);\n  useEffect(() => {\n    if (searchMode === 'async') {\n      handleAsyncSearch(inputValue); // Perform async search if search mode is async\n    } else {\n      // For local search mode, filter options based on input value\n      setFilteredOptions(inputValue ? options.filter(option => option.label.toLowerCase().includes(inputValue.toLowerCase())) : []);\n    }\n  }, [inputValue, searchMode, options, handleAsyncSearch]);\n  const handleInputChange = event => {\n    const {\n      value\n    } = event.target;\n    setInputValue(value);\n\n    // For local search mode, filter options based on input value\n    if (searchMode === 'local') {\n      setFilteredOptions(value ? options.filter(option => option.label.toLowerCase().includes(value.toLowerCase())) : []);\n    }\n  };\n  const handleOptionSelection = option => {\n    const isSelected = selectedOptions.some(item => item.value === option.value);\n    if (isSelected) {\n      // Remove the option from selectedOptions if already selected\n      const updatedOptions = selectedOptions.filter(item => item.value !== option.value);\n      setSelectedOptions(updatedOptions);\n    } else {\n      // Add the option to selectedOptions if not already selected\n      setSelectedOptions([...selectedOptions, option]);\n    }\n  };\n  const toggleDropdown = () => {\n    setShowDropdown(!showDropdown); // Toggle dropdown visibility\n  };\n  const handleBlur = event => {\n    const target = event.relatedTarget;\n    if (!target || !target.classList.contains('dropdown-item')) {\n      setShowDropdown(false); // Close dropdown if focus moves outside of it\n    }\n  };\n  const handleFocus = () => {\n    setShowDropdown(true);\n    // Additional logic you want to execute when the input or element receives focus\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: styles.autocomplete,\n    onBlur: handleBlur,\n    children: [description && /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"description\",\n      children: description\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 110,\n      columnNumber: 23\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: styles.autocomplete,\n      onChange: handleBlur,\n      onClick: handleFocus,\n      children: [/*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"text\",\n        value: inputValue,\n        onChange: handleInputChange,\n        onClick: toggleDropdown,\n        tabIndex: 0,\n        placeholder: placeholder,\n        disabled: disabled,\n        readOnly: true // Prevent user from editing input directly\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 112,\n        columnNumber: 9\n      }, this), searchMode === 'local' && showDropdown && /*#__PURE__*/_jsxDEV(\"div\", {\n        className: `dropdown-menu ${showDropdown ? 'show' : ''}`,\n        children: filteredOptions.map(option => /*#__PURE__*/_jsxDEV(\"label\", {\n          className: \"dropdown-item\",\n          children: [/*#__PURE__*/_jsxDEV(\"input\", {\n            type: \"checkbox\",\n            tabIndex: 0,\n            checked: selectedOptions.some(item => item.value === option.value),\n            onChange: () => handleOptionSelection(option)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 126,\n            columnNumber: 17\n          }, this), renderOption(option)]\n        }, option.value, true, {\n          fileName: _jsxFileName,\n          lineNumber: 125,\n          columnNumber: 15\n        }, this))\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 123,\n        columnNumber: 11\n      }, this), searchMode === 'async' && showDropdown && /*#__PURE__*/_jsxDEV(\"div\", {\n        className: `dropdown-menu ${showDropdown ? 'show' : ''}`,\n        children: filteredOptions.map(option => /*#__PURE__*/_jsxDEV(\"label\", {\n          className: \"dropdown-item\",\n          children: [/*#__PURE__*/_jsxDEV(\"input\", {\n            type: \"checkbox\",\n            tabIndex: 0,\n            checked: selectedOptions.some(item => item.value === option.value),\n            onChange: () => handleOptionSelection(option)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 141,\n            columnNumber: 17\n          }, this), renderOption(option)]\n        }, option.value, true, {\n          fileName: _jsxFileName,\n          lineNumber: 140,\n          columnNumber: 15\n        }, this))\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 138,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 111,\n      columnNumber: 7\n    }, this), loading && /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"spinner\",\n      children: \"Loading...\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 153,\n      columnNumber: 19\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 109,\n    columnNumber: 5\n  }, this);\n};\n_s(Autocomplete, \"Ry/nVUkIzJrRgBrMhuXFqKeCm7s=\");\n_c = Autocomplete;\nexport default Autocomplete;\nexport {};\nvar _c;\n$RefreshReg$(_c, \"Autocomplete\");","map":{"version":3,"names":["React","useState","useEffect","debounce","styles","jsxDEV","_jsxDEV","Autocomplete","description","options","placeholder","disabled","loading","onChange","renderOption","value","searchMode","asyncSearch","_s","inputValue","setInputValue","selectedOptions","setSelectedOptions","showDropdown","setShowDropdown","filteredOptions","setFilteredOptions","handleAsyncSearch","query","results","filter","option","label","toLowerCase","includes","handleInputChange","event","target","handleOptionSelection","isSelected","some","item","updatedOptions","toggleDropdown","handleBlur","relatedTarget","classList","contains","handleFocus","className","autocomplete","onBlur","children","fileName","_jsxFileName","lineNumber","columnNumber","onClick","type","tabIndex","readOnly","map","checked","_c","$RefreshReg$"],"sources":["/Users/choijiwon/my-projects/autocomplete-component/src/components/Autocomplete.tsx"],"sourcesContent":["import React, { useState, useEffect } from 'react';\nimport debounce from '../utils/debounce';\nimport styles from './Autocomplete.module.css';\n\nexport interface Option {\n  value: string;\n  label: string;\n}\n\ninterface AutocompleteProps {\n  description: string;\n  options: Option[];\n  placeholder: string;\n  disabled: boolean;\n  loading: boolean;\n  onChange: (selected: Option[]) => void;\n  renderOption: (option: Option) => React.ReactNode;\n  value: Option[];\n  searchMode: 'local' | 'async';\n  asyncSearch?: (query: string) => Promise<Option[]>;\n}\n\nconst Autocomplete: React.FC<AutocompleteProps> = ({\n  description,\n  options,\n  placeholder,\n  disabled,\n  loading,\n  onChange,\n  renderOption,\n  value,\n  searchMode,\n  asyncSearch,\n}) => {\n  const [inputValue, setInputValue] = useState('');\n  const [selectedOptions, setSelectedOptions] = useState<Option[]>(value); // Initialize selectedOptions with the prop value\n  const [showDropdown, setShowDropdown] = useState(false); // State to manage dropdown visibility\n  const [filteredOptions, setFilteredOptions] = useState<Option[]>(options); // State to hold filtered options for async search\n\n  const handleAsyncSearch = debounce(async (query: string) => {\n    if (asyncSearch) {\n      const results = await asyncSearch(query);\n      setFilteredOptions(results);\n    }\n  }, 300);\n\n  useEffect(() => {\n    if (searchMode === 'async') {\n      handleAsyncSearch(inputValue); // Perform async search if search mode is async\n    } else {\n      // For local search mode, filter options based on input value\n      setFilteredOptions(\n        inputValue\n          ? options.filter(option =>\n              option.label.toLowerCase().includes(inputValue.toLowerCase())\n            )\n          : []\n      );\n    }\n  }, [inputValue, searchMode, options, handleAsyncSearch]);\n\n  const handleInputChange = (event: React.ChangeEvent<HTMLInputElement>) => {\n    const { value } = event.target;\n    setInputValue(value);\n\n    // For local search mode, filter options based on input value\n    if (searchMode === 'local') {\n      setFilteredOptions(\n        value\n          ? options.filter(option =>\n              option.label.toLowerCase().includes(value.toLowerCase())\n            )\n          : []\n      );\n    }\n  };\n\n  const handleOptionSelection = (option: Option) => {\n    const isSelected = selectedOptions.some(item => item.value === option.value);\n\n    if (isSelected) {\n      // Remove the option from selectedOptions if already selected\n      const updatedOptions = selectedOptions.filter(item => item.value !== option.value);\n      setSelectedOptions(updatedOptions);\n    } else {\n      // Add the option to selectedOptions if not already selected\n      setSelectedOptions([...selectedOptions, option]);\n    }\n  };\n\n  const toggleDropdown = () => {\n    setShowDropdown(!showDropdown); // Toggle dropdown visibility\n  };\n\n  const handleBlur = (event: React.FocusEvent<HTMLDivElement>) => {\n    const target = event.relatedTarget as HTMLElement;\n    if (!target || !target.classList.contains('dropdown-item')) {\n      setShowDropdown(false); // Close dropdown if focus moves outside of it\n    }\n  };\n\n  const handleFocus = () => {\n    setShowDropdown(true);\n    // Additional logic you want to execute when the input or element receives focus\n  };\n\n\n  return (\n    <div className={styles.autocomplete} onBlur={handleBlur}>\n      {description && <div className=\"description\">{description}</div>}\n      <div className={styles.autocomplete} onChange={handleBlur} onClick={handleFocus}>\n        <input\n          type=\"text\"\n          value={inputValue}\n          onChange={handleInputChange}\n          onClick={toggleDropdown}\n          tabIndex={0}\n          placeholder={placeholder}\n          disabled={disabled}\n          readOnly // Prevent user from editing input directly\n        />\n        {searchMode === 'local' && showDropdown && (\n          <div className={`dropdown-menu ${showDropdown ? 'show' : ''}`}>\n            {filteredOptions.map(option => (\n              <label key={option.value} className=\"dropdown-item\">\n                <input\n                  type=\"checkbox\"\n                  tabIndex={0}\n                  checked={selectedOptions.some(item => item.value === option.value)}\n                  onChange={() => handleOptionSelection(option)}\n                />\n                {renderOption(option)}\n              </label>\n            ))}\n          </div>\n        )}\n        {searchMode === 'async' && showDropdown && (\n          <div className={`dropdown-menu ${showDropdown ? 'show' : ''}`}>\n            {filteredOptions.map(option => (\n              <label key={option.value} className=\"dropdown-item\">\n                <input\n                  type=\"checkbox\"\n                  tabIndex={0}\n                  checked={selectedOptions.some(item => item.value === option.value)}\n                  onChange={() => handleOptionSelection(option)}\n                />\n                {renderOption(option)}\n              </label>\n            ))}\n          </div>\n        )}\n      </div>\n      {loading && <div className=\"spinner\">Loading...</div>}\n    </div>\n  );\n};\n\nexport default Autocomplete;\n\nexport { };"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}